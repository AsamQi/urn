(import string)
(import urn/logger)

(defun lex (str name)
  (let* ((lines (string/split str "\n"))
         (line 1)
         (column 1)
         (offset 1)
         (length (string/#s str))
         (out '())
         ;; Consumes a single symbol and increments the position
         (consume! (lambda ()
           (if (= (string/char-at str offset) "\n")
             (progn
               (inc! line)
               (set! column 1))
             (inc! column))
           (inc! offset)))
         ;; Generates a table with the current position
         (position (lambda () (struct :line line :column column :offset offset)))
         ;; Generates a table with a particular range
         (range (lambda (start finish) (struct :start start :finish finish :lines lines :name name)))
         ;; Appends a token to the list
         (append! (lambda (tag start finish)
           (let ((start (or start (position)))
                 (finish (or finish (position))))
             (push-cdr! out (struct
               :tag      tag
               :range    (range start finish)
               :contents (string/sub str (.> start :offset) (.> finish :offset))))))))
    ;; Scan the input stream, consume one character, then reading til the end of that token.
    (while (<= offset length)
      (with (char (string/char-at str offset))
        (cond
          ((or (= char "\n") (= char "\t") (= char " ")))
          ((= char "'") (append! "quote"))
          ((= char "(") (append! "open"))
          ((= char ")") (append! "close"))
          ((= char "`") (append! "quasiquote"))
          ((= char ",") (if (= (string/char-at str (succ offset) "@"))
            (with (start (position))
              (consume!)
              (append! "unquote-splice" start))
            (append! "unquote")))
          ((or (between? char "0" "9") (and (= char "-") (between? (string/char-at str (succ offset)) "0" "9")))
            (with (start (position))
              (while (string/find (string/char-at str (succ offset)) "[0-9.e+-]")
                (consume!))
              (append! "number" start)))
          ((= char "\"")
            (with (start (position))
              (consume!)
              (set! char (string/char-at str offset))
              (while (/= char "\"")
                (cond
                  ((or (= char nil) (= char ""))
                    (urn/logger/print-error! "Expected '\"', got eof")

                    (let ((start (range start))
                          (finish (range (position))))
                      (urn/logger/put-trace! (struct :range finish))
                      (urn/logger/put-lines! false
                        start  "string started here"
                        finish "end of file here")
                      (error "An error occured" 0)))
                  ((= char "\\") (consume!))
                  (true))
                (consume!)
                (set! char (string/char-at str offset)))
              (append! "string" start)))
          ((= char ";")
            (while (and (<= offset length) (/= (string/char-at str (succ offset)) "\n"))
              (consume!)))
          (true
            (let ((start (position))
                  (tag (if (= char ":" ) "key" "symbol")))
              (set! char (string/char-at str (succ offset)))
              (while (and (/= char "\n") (/= char " ") (/= char "\t") (/= char "(") (/= char ")"))
                (print! char)
                (consume!)
                (set! char (string/char-at str (succ offset))))
              (append! tag start))))
        (consume!)))
    out))
